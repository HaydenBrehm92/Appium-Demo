plugins {
    //shadow plugin
    //id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "net.researchgate.release" version "3.0.2"
    id "dev.jacomet.logging-capabilities" version "0.10.0"
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
}

group 'com.AppiumAutomatioUtility'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.testng:testng:7.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.9'

    // https://mvnrepository.com/artifact/io.appium/java-client
    implementation group: 'io.appium', name: 'java-client', version: '8.1.1'

    implementation platform('org.apache.logging.log4j:log4j-bom:2.22.1')

    implementation 'org.apache.logging.log4j:log4j-api'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation 'org.apache.logging.log4j:log4j-core:2.22.1'


    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation 'org.seleniumhq.selenium:selenium-java:4.4.0'

    // https://mvnrepository.com/artifact/com.intellij/forms_rt
    implementation group: 'com.intellij', name: 'forms_rt', version: '7.0.3'

    // https://mvnrepository.com/artifact/net.sf.bluecove/bluecove
    //implementation group: 'net.sf.bluecove', name: 'bluecove', version: '2.1.0'

    // https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket
    implementation group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.5.4'

    implementation files('libs/bluecove-2.1.1.jar')

    implementation 'com.formdev:flatlaf:3.0'

    // https://mvnrepository.com/artifact/net.researchgate/gradle-release
    implementation 'net.researchgate:gradle-release:2.4.0'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.15.0'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    implementation (group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '3.2.1') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    // https://mvnrepository.com/artifact/org.webjars.npm/htmx.org
    implementation group: 'org.webjars.npm', name: 'htmx.org', version: '1.9.10'

}

test {
    useTestNG(){
        suites 'backend/src/main/resources/testng.xml'
    }
}



tasks.register("processFrontendResources", Copy) {
    // Directory containing the artifacts produced by the frontend project
    def frontendProjectBuildDir = project(":frontend").buildDir
    def frontendBuildDir = file("${frontendProjectBuildDir}/www")
    // Directory where the frontend artifacts must be copied to be packaged alltogether with the backend by the 'war'
    // plugin.
    def backendProjectBuildDir = project(":backend").buildDir
    def frontendResourcesDir = file("${backendProjectBuildDir}/resources/main/static")

    group = "Frontend"
    description = "Process frontend resources"
    dependsOn(":frontend:assembleFrontend")

    from(frontendBuildDir)
    into(frontendResourcesDir)
}

tasks.named("processResources") {
    dependsOn("processFrontendResources")
    dependsOn(":frontend:webpackdist")
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}



task runpy(type:Exec){
    String var = '\\src\\Main\\resources\\python-scripts'
    workingDir = var
    commandLine 'pyinstaller', '-F', 'DataBreakdown.py'
    /*doLast {
        copy{
            from '\\src\\Main\\resources\\python-scripts\\dist\\DataBreakdown.exe'
            into "./release"
        }
    }*/
}

task runpy_DataBreakdown(type:Exec){
    String var = '\\src\\Main\\resources\\python-scripts'
    workingDir = var
    commandLine 'pyinstaller', '-F', 'DataBreakdown.py'
    /*doLast {
        copy{
            from '\\src\\Main\\resources\\python-scripts\\dist\\DataBreakdown.exe'
            into "./release"
        }
    }*/
}

task runpy_MemInfoTask(type:Exec){
    String var = '\\src\\Main\\resources\\python-scripts'
    workingDir = var
    commandLine 'pyinstaller', '-F', 'memInfoTask.py'
    /*doLast {
        copy{
            from '\\src\\Main\\resources\\python-scripts\\dist\\DataBreakdown.exe'
            into "./release"
        }
    }*/
}

/*tasks.register("releasePyExec", Copy){c ->
    from '\\src\\Main\\resources\\python-scripts\\dist\\DataBreakdown.exe'
    into "./release"
}*/

task cleanPythonFolder(type:Delete){
    delete '\\src\\Main\\resources\\python-scripts\\DataBreakdown.spec'
    delete '\\src\\Main\\resources\\python-scripts\\memInfoTask.spec'
    delete '\\src\\Main\\resources\\python-scripts\\dist'
    delete '\\src\\Main\\resources\\python-scripts\\build'
}

jar {
    tasks.withType(Jar) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    // Keep jar clean:
    //exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes 'Main-Class': 'core.Runner'
    }

    //getDestinationDirectory().set(file("./release"))
}

beforeReleaseBuild.dependsOn(cleanPythonFolder, jar.mustRunAfter(cleanPythonFolder),
        runpy.mustRunAfter(jar))